## 背景

目前移动设备的屏幕与摄像头传感器每年都在更新换代，越来越多的新机型能够通过摄像头感应器捕捉到 sRGB 范围以外的颜色，然后生成广色域图片。然而如果应用不对广色域进行适配，会出现广色域图片显示异常的问题。目前我们对常用的应用进行测试，发现部分应用的某些场景都出现了 P3 广色域图片颜色暗淡的情况。

![](image/2850086000403604560.20201214141419.41283260832995014125089050954177.png)

上图所示是应用没有对广色域进行适配从而产生 P3 广色域图片失真的示例，其中标记有 sRGB 的图片为 sRGB 色域图片，未标记的为 P3 广色域图片，可以明显看出，无论是大图还是缩略图，P3 广色域图片的颜色更加暗淡。因此，为了保证您的应用能够正确、高效地呈现广色域效果，本文提供一些技术上的建议，帮助您为应用添加广色域支持。

## 建议

建议您不要总是假定图片处于 sRGB 色域，而是明确图片的色域信息、解码模块色域配置以及Activity 的色域配置，保证 Activity 的色域模式与图片解码后的色域范围匹配，避免广色域图片显示失真。


建议您的应用在解码模块不要设置固定的色域，而是根据设备和显示屏是否支持广色域，activity是否启用广色域模式以及业务场景，动态的设置色域。首先您需要判断设备和显示屏是否支持广色域，Activity 是否启用广色域模式。如果设备不支持或者 Activity 未启用广色域模式，则需要把每张图片解码为 sRGB 色域。另外，由于启用广色域模式时，Activity 的窗口将更多内存和 GPU 处理能力用于画面构成。在启用广色域模式之前，您应仔细考虑该 Activity 是否真的能从中受益。例如，以全屏模式显示照片的 Activity 适合使用广色域模式，但显示较小缩略图的 Activity 则不建议。具体决策流程如图所示。
![](image/2850086000403604560.20201214141821.20885559034510109754520425063042.png)

For Opengl Example：

https://android-developers.googleblog.com/2019/05/wide-color-photos-are-coming-to-android.html

如何检测设备和显示屏，如何启用广色域模式以及如何动态设置图片的解码色域将在下文介绍。

## 设备及系统能力检测

如果您的应用想要实现广色域显示，首先需要确定设备和系统会否支持。您可以通过某个特定显示屏及系统是否支持广色域，可以调isScreenWideColorGamut()进行判断，该方法仅当设备支持广色域，且支持广色域渲染时才会返回 true。

```
Configuration#isScreenWideColorGamut()                                                                                                                                             Added in API level 26


public boolean isScreenWideColorGamut ()


Return whether the screen has a wide color gamut and wide color gamut rendering is supported by this device. When true, it implies the screen is colorspace aware but not necessarily color-managed. The final colors may still be changed by the screen depending on user settings.
```

注：仅华为 Mate40系列及以后的设备支持广色域和支持上述 API 返回 true

# 启用广色域模式

通过上面章节 3 中设备判断支持后，应用可以使用 colorMode 属性请求在兼容设备上以广色域模式 显示 Activity。

```
colorMode                                                                                                                                                                                              Added in API level 26


    public static final int colorMode


    Specify the color mode the activity desires. The requested color mode may be ignored depending on the capabilities of the display the activity is displayed on.


     Must be one of the following constant values.


    Constant Value: 16844106 (0x0101054a)
```



## 启用广色域

可以通过以下方法实现，先通过设备判断后再通过代码实现选择要不要启用广色域支持。具体通过 调用 setColorMode(int) 方法并传入 COLOR_MODE_WIDE_COLOR_GAMUT，在您的 Activity 中以编程 方式设置颜色模式。


如您可以再应用 OnCreate的时候进入如下设置:
```
getWindow().setColorMode(ActivityInfo.COLOR_MODE_WIDE_COLOR_GAMUT);
```

如果应用有多个 Activity应用启用广色域，则需要对每个 Activity都要进行以上设置。 当然需要先经过 Configuration#isScreenWideColorGamut() 判断设备及系统支持后再启用广色域模式。 如果设备支持，启用广色域，需要针对当前 Activity 加载的图片根据不同控件展示图片的方式选择不同 的方式实现色域转换即可。

参考链接：

  [setColorMode(int)](https://developer.android.google.cn/reference/android/view/Window.html#setColorMode(int))

  [COLOR_MODE_WIDE_COLOR_GAMUT](https://developer.android.google.cn/reference/android/content/pm/ActivityInfo.html#COLOR_MODE_WIDE_C%20OLOR_GAMUT)

判断应用启用广色域模式是否成功

应用是否启用广色域成功，一种方法您可以通过检查 getColorMode() 方法是否返回 COLOR_MODE_WIDE_COLOR_GAMUT 来验证您的应用是否正确请求了广色域模式。 如通过在应用中使用 getWindow().getColorMode();



另外一种方法也可以判断：应用启用广色域后，您可以在应用图片显示界面执行如下命令：adb shell dumpsys SurfaceFlinger 查看应用对应图层属性 dataspace 中有 0088a0000 这一标识即 P3 广色域标识 即生效
![](image/2850086000403604560.20201214144049.67486436714483194038142040573550.png)

## 原理简介

当应用启用广色域标识后，标识经过 VIEW => HWUI =>  GUI => SURFACEFLINGER => HWC传 递 在底层 HWC 模块会进行识别广色域 data并进行显示层不同的色域转换处理（这里不同于图片解码 的色域转换，一般情况下保证解码的色域与底层显示层色域统一即可）并进一步应用显示效果达到屏 幕。简化的流程图如下：
![](image/2850086000403604560.20201214144146.86904764866631637420224389332210.png)

## P3 广色域场景建议：

* 注意 1：建议在支持 P3广色域拍照和广色域色彩管理的设备上，用户照片的显示浏览场景采用 P3广色 域的色彩显示效果。比如大图、全屏显示照片场景，不建议在显示小缩略图等或者不涉及图片展示场景 启用广色域；

* 注意 2：启用广色应用 Activity窗口渲染时会增加相应的系统开销，如内存、gpu算力，所以请应用业 务本身作好评估；

* 注意 3：广色域配置只是显示针对图片在广色域场景或者说图片含有 ICC profiles 的图片（如 JPEG， PNG,WebP），如果图片不是广色域的还是需要转换为广色域处理。比如针对应用展示图片的不同实现 方式考虑解码时需要将 sRGB 图片转换到 P3广色域或者通过通过 gpu shader 实现色域的转换，针对 Google标准接口解码目标色域转换参考接口 4.4 系统接口实现，gpu  shader 原理同下 5.3.2 实现色域转 换。

## 设置目标解码颜色空间

启用广色域后，需要设置图片解码显示指定颜色空间广色域，才能实现广色域效果。针对走系统接口的应用（目前只针对系统标准接口），Android 对 P3的格式转换有以下 3 种 API实现。

* 1）BitmapFactory

* 2）BitmapRegionDecoder

* 3）ImageDecoder

详细的实现部分可以参考下面几个小节：
### BitmapFactory

在 Android API 中通过 android.graphics.BitmapFactory 可以实现解码图片文件（全解码），这其中包括了通过文件、流、数字创建解码器。通过在 BitmapFactory.Option 中设置 inPreferredColorSpace 参数，允许您为已解码的 Bitmap 文件指定目标色彩空间。假设您现在想要解码一个文件，那么您可以用

下面的代码进行色彩管理。现在大部分应用调用的是 BitmapFactory解码。APP 可以使用如下代码进行设置。
```
final BitmapFactory.Options options = new BitmapFactory.Options();


// Decode this file to sRGB color space.


options.inPreferredColorSpace = ColorSpace.get(ColorSpace.Named.SRGB);


// Decode this file to P3 color space


// options.inPreferredColorSpace = ColorSpace.get(ColorSpace.Named.DISPLAY_P3);


Bitmap bitmap = BitmapFactory.decodeFile(FILE_PATH, options);
```

上述代码把目标色域空间设置成 SRGB 或者设置 DISPLAY_P3， 保存在 options 参数里。

然后调用解码 API decodeFile 进行解码（其他 decodeXXX 接口类似）。BitmapFactory里有 5 个API解码接口供应用使用。如下：
```
public static Bitmap decodeFile(String pathName, Options opts)
public static Bitmap decodeFileDescriptor(FileDescriptor fd, Rect outPadding, Options opts)
public static Bitmap decodeByteArray(byte[] data, int offset, int length, Options opts) public
public static Bitmap decodeResource(Resources res, int id, Options opts)
```
Android 里与本次讨论的图片色域设置相关的图片格式如下：

| SRGB  |ADOBE_RGB | DISPLAY_P3 |
|--|--|--|


ADOBE_RGB 很少涉及，因此您主要考虑 SRGB 和 DISPLAY_P3 两种图片格式。

### BitmapRegionDecoder

在 Android API中通过 android.graphics.BitmapRegionDecoder 实现解码图片的某一块矩形区域（区 域解码）。通过在 BitmapFactory.Option 设置 inPreferredColorSpace 参数，允许您为已解码的 Bitmap 文 件指定目标色彩空间。假设您现在想要解码一个文件，那么您可以用下面的代码进行色彩管理。如 APP 可以使用如下代码进行设置目标 ColorSpace。


```
final BitmapFactory.Options options = new BitmapFactory.Options();
LOCAL_STATIC_JAVA_LIBRARIES

// Set sRGB colorspace when decoding by setting Options.inPreferredColorSpace


options.inPreferredColorSpace = ColorSpace.get(ColorSpace.Named.SRGB);


// Decode this file to P3 color space

LOCAL_STATIC_JAVA_LIBRARIES
// options.inPreferredColorSpace = ColorSpace.get(ColorSpace.Named.DISPLAY_P3);


Rect rect = new Rect(100, 100); // create a rect region


// Decodes a rectangle region in the image specified by rect
LOCAL_STATIC_JAVA_LIBRARIES

BitmapRegionDecoder regionDecoder = BitmapRegionDecoder.newInstance(is, false);

```

上述代码把目标色域空间设置成 SRGB 或者 P3， 保存在 options 参数里。然后调用解码 API  decodeRegion进行解码。

### ImageDecoderLOCAL_STATIC_JAVA_LIBRARIES

从 Android P (API 等级 28) 开始，Android 引入了现代化图片解码工具 ImageDecoder。如果您已将

APK 升级至 API 等级 28 或更高，我们建议您使用 ImageDecoder，而非 BitmapFactory 或 BitmapFactory.Option API。但是大部分应用还是使用 BitmapFactory。

针对 ImageDecoder 可以通过 ImageDecoder.setTargetColorSpace 实现目标色彩空间转换：

```
ImageDecoder.Source source = ImageDecoder.createSourcLOCAL_STATIC_JAVA_LIBRARIESe(FILE_PATH);

try {

    bitmap = ImageDecoder.decodeBitmap(source,
            new ImageDecoder.OnHeaderDecodedListener() {
                @Override
                public void onHeaderDecoded(ImageDecoder decoder,
                        ImageDecoder.ImageInfo info,
                        ImageDecoder.Source source) {
                     decoder.setTargetColorSpace(ColorSpace.get(Named.SRGB));
                    // Decode this file to P3 color space

                    // decoder.setTargetColorSpace(ColorSpace.Named.DISPLAY_P3);
                }
            });
} catch (IOException e) {

  // handle exception.
}
```
如上示例代码使用 ImageDecoder#decodeBitmap API 将图片转换为 sRGB 或者 P3位图。应用在调用解码的 API接口前，把色域设置成 SRGB 或者 P3。


## 广色域兼容性方案

应用不可以假设输入的外部图片使用 sRGB 色彩空间，也就是说，应用必须自行检查已解码图片的 色彩空间，并进行必要转换。如果没有做到这一点，可能会导致色彩失真，或者色彩配置文件在某个环 节不被接受。比如已知的问题场景有：
```
    总是假定图片处于 sRGB 色彩空间

    没有进行必要转换，便将图片上传为纹理，比如一些视频效果场景，直接拿解码的 pixels 上传 gpu；

    在压缩时忽略 ICC 配置文件，比如有些场景会对图片上传或者压缩处理，丢失了 icc；
```
因此应用本身也需要有兼容性方案能够使得 P3 广色域图片显示正确。走系统标准接口的会有系统 兼容性方案，还有一些没有使用系统标准接口而采用其他开源库或者第三方解码库则需要应用单独适 配。

### Fresco 适配

从我们目前的测试结果来看，当应用使用 Fresco 三方开源框架并且进行尺寸缩放或者旋转的操作之后，P3图片显示会有失真的问题。为了解决该问题，我们建议可以使用 java接口进行转换而不是使用默认的 native C/C++接口。具体代码实现如下：
```
ImagePipelineConfig.Builder builder = ImagePipelineConfig.newBuilder(this);

builder.setImageTranscoderFactory(new SimpleImageTranscoderFactory((int) BitmapUtil.MAX_BITMAP_SIZE));

ImagePipelineConfig config = builder.build();

Fresco.initialize(this, config);
```

### Glide 适配

Glide的在 P 版本以上默认 SRGB，为了减少不必要色域转换带来的 cpu开销，我们建议针对新产品上 配置默认为 DISPLAY_P3
![](image/2850086000403604560.20201214150013.52136372805408050832283239021927.png)

### 其他非 Android 系统接口适配指导

当应用不支持广色域时，则需要兼容广色域图片，就需要保证广色域 P3的图片解码转换至 sRGB，具体的转换如下面介绍（注：下面方法只是最简单的转换方式，没有考虑更多细节）

`原理`

不同色域的图像，即使设备 RGB 相同，其编码所表示的色彩也是不同的，所以当彩色图像在不同 的设备之间传输和显示时，常会出现颜色失真现象。目前公认的解决方案是通过设计合理的色域映射算 法来改善颜色失真问题.

色域映射最简单方式通过 3x3矩阵方式实现，有溢出截断处理即可。具体分为三个步骤：

* a) 先做 degamma 在原色域 RGB 空间由非线性转为线性，

* b) 然后在线性域空间通过 3x3 矩阵转为目标色域 RGB 空间，

* c) 最后再目标色域通过 gamma 由线性转回非线性。

`色域转换伪代码实现 `

* 1) Degamma 线性化
```
        % 输入 rgb 3*1 向量，gamma 值

            function out = gammik(rgb, gamma)

            sR=rgb(:,1)./1;

            sG=rgb(:,2)./1;

            sB=rgb(:,3)./1;


            g = gamma;

            %apply gamma function to convert to sRGB

            sr(sR >= 0) = sR(sR >= 0).^g;

            sr(sR <  0) = -((-sR(sR < 0)).^g);

            sg(sG >= 0) = sG(sG >= 0).^g;

            sg(sG <  0) = -((-sG(sG < 0)).^g);

            sb(sB >= 0) = sB(sB >= 0).^g;

            sb(sB <  0) = -((-sB(sB < 0)).^g);

            out=[sr',sg',sb'];

      end
```
 注：gamma = 2.2 为非线性到线性， gamma = 1/2.2 线性转非线性


* 2)  Gamut Mapping

     a) 计算矩阵 M

 𝑀 = 𝑀2 −1 ∗ 𝑀1

 其中𝑀1为原色域 RGB 到 XYZ 的转换矩阵，M2 为目标色域 RGB 到 XYZ 的转换矩阵，𝑀2 −1为 XYZ 到目标色域 RGB 的转换矩阵即 M2的逆矩阵，具体矩阵数值参考： http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html

 补充说明 sRGB 和 Display-P3 矩阵

| GB Working Space |Reference White|RGB to XYZ [M]|	XYZ to RGB [M]-1|
|--|--|--|--|
|sRGB|D50|0.4360747  0.3850649  0.1430804  0.2225045  0.7168786  0.0606169  0.0139322  0.0971045  0.7141733  | 3.1338561 -1.6168667 -0.4906146 -0.9787684  1.9161415  0.0334540  0.0719453 -0.2289914  1.4052427 |
|Display-P3 |D50| 0.515097  0.291970  0.157145 0.241179  0.692244  0.066576  -0.001049  0.041883  0.784354  |2.404071 -0.989915 -0.397631 -0.842217 1.798831 0.016053 0.048188 -0.097378 1.273546 |

* b) M*RGB
```
    % 输入 RGB 3x1 向量，M 3x3 转换矩阵，输出 RGB 3x1 向量

    function out = ColorSpaceTransform(RGB,M)

         ourt = M * RGB;

   end
```

比如 P3 –> sRGB, 则为 M = [MsRGBToxyz]-1*Mp3toxyz = MxyztosRGB * Mp3toxyz

* 3) Gamma 非线性化

```
function out = gammik2(sRGB, gamma)

  sR=sRGB(:,1);

  sG=sRGB(:,2);

  sB=sRGB(:,3);

  g=1/gamma;

  sR(sR >= 0) = sR(sR >= 0).^g;

  sR(sR <  0) = -((-sR(sR < 0)).^g);


  sG(sG >= 0) = sG(sG >= 0).^g;

  sG(sG <  0) = -((-sG(sG < 0)).^g);

  sB(sB >= 0) = sB(sB >= 0).^g;

  sB(sB <  0) = -((-sB(sB < 0)).^g);


  R=sR*1;

  G=sG*1;

  B=sB*1;


  out=[R,G,B];

  end
```
按照如上方式可以简单实现针对 P3 到 sRGB 的色域转换。

##Google Android 转换参考

我们在 Google Android 系统中也发现类似可以实现转换，可以参考：

https://cs.android.com/android/platform/superproject/+/master:frameworks/native/libs/ui/ColorSpace.cpp;l=250%20?q=colorspace

针对 icc的处理可以参考：

https://cs.android.com/android/platform/superproject/+/master:external/skia/src/codec/SkJpegCodec.cpp;bpv=1;%20bpt=1;l=134?q=skjpegcodec

三方库可以实现转换，具体三方库链接如下 ：

https://github.com/google/skia/blob/master/third_party/skcms/skcms.cc

其中的 skcms_Transform函数可以参考。
